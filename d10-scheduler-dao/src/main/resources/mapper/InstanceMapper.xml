<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.krystalics.d10.scheduler.dao.mapper.InstanceMapper">
    <sql id="table">
        instance
    </sql>

    <sql id="fields">
        instance_id         as instanceId,
        task_id             as taskId,
        version_id          as versionId,
        start_time_theory   as startTimeTheory,
        job_conf            as jobConf,
        state               as state,
        job_log_address     as jobLogAddress,
        run_start_time      as runStartTime,
        run_end_time        as runEndTime,
        node                as node,
        auto_start          as autoStart,
        ctime               as ctime,
        mtime               as mtime
    </sql>

    <sql id="where_sql">
        <where>
            1 = 1

            <if test="instanceId != null and instanceId != ''">
                and instance_id = #{instanceId}
            </if>

            <if test="taskId != null and taskId != ''">
                and task_id = #{taskId}
            </if>

            <if test="versionId != null and versionId != ''">
                and version_id = #{versionId}
            </if>

        </where>
    </sql>


    <insert id="insert" useGeneratedKeys="true" keyProperty="instanceId">
        insert into
        <include refid="table"/>(
        instance_id       ,
        task_id           ,
        version_id        ,
        start_time_theory ,
        job_conf          ,
        state             ,
        job_log_address   ,
        run_start_time    ,
        run_end_time      ,
        node              ,
        auto_start        )
        value(
        #{instanceId},
        #{taskId},
        #{versionId},
        #{startTimeTheory},
        #{jobConf},
        #{state},
        #{jobLogAddress},
        #{runStartTime},
        #{runEndTime},
        #{node},
        #{autoStart})
    </insert>

    <select id="list" resultType="com.github.krystalics.d10.scheduler.dao.entity.Instance">
        select
        <include refid="fields"/>
        from
        <include refid="table"/>
        <include refid="where_sql"/>
        <if test="orderByOperation != null">
            <foreach collection="orderByOperation.itemOperators" item="opr" separator="," open="order by ">
                ${opr.column} ${opr.operator}
            </foreach>
        </if>
        <if test="page != null">
            limit #{page.offset},#{page.limit}
        </if>
    </select>

    <select id="count" resultType="int">
        select count(*) from
        <include refid="table"/>
        <include refid="where_sql"/>
    </select>


    <update id="update">
        UPDATE
        <include refid="table"/>
        <set>
            <if test="state != null and state != ''">
                state = #{state},
            </if>
            <if test="queueName != null and queueName != ''">
                queue_name = #{queueName},
            </if>
            <if test="runStartTime != null and runStartTime != ''">
                run_start_time = #{runStartTime},
            </if>
            <if test="runEndTime != null and runEndTime != ''">
                run_end_time = #{runEndTime},
            </if>
            <if test="node != null and node != ''">
                node = #{node},
            </if>
        </set>
        WHERE instance_id = #{instanceId}
    </update>



    <select id="getById" resultType="com.github.krystalics.d10.scheduler.dao.entity.Instance">
        select
        <include refid="fields"/>
        from
        <include refid="table"/>
        <include refid="where_sql"/>
    </select>

    <select id="findLastInstanceByVersionId" resultType="com.github.krystalics.d10.scheduler.dao.entity.Instance">
        select
        <include refid="fields"/>
        from
        <include refid="table"/>
        where version_id = #{versionId}
        order by instance_id desc
        limit 1;
    </select>

</mapper>
